git init 初始化
git status  查看状态
git diff 比较
git add  新增
git commit -m "xxx"  提交
git log  查看日志
git reset --hard HEAD^  恢复上一个版本  HEAD^^ 上上个版本  HEAD~100前100个版本
git reset --hard 版本号
git reflog  查看历史日志
git checkout -- readme.txt  丢弃修改,会到上次最新修改状态
git rm test.txt  删除文件，需commit

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
git branch -D <name>强行删除

git merge --no-ff -m "merge with no-ff" <name>  合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况



本地远程仓库上传到GitHUB
git remote add origin https://github.com/HelloWuJie/learngit.git   远程创建仓库
git push -u origin master  或者git push -u origin dev  推送其他分支
git push origin master  

从GitHUB更新到本地仓库
git clone git@github.com:HelloWuJie/learngit.git
git fetch origin master

安全操作：
git remote -v  查看远程仓库
git fetch origin master:temp
git diff temp
git merge temp
git branch -d temp  删除分支

创建远程origin的dev分支到本地
git checkout -b dev origin/dev
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


git stash  保存现场
git stash list  查看当前stash现场
git stash pop  恢复最新现场并删除
git stash apply stash@{0}  恢复指定现场
git stash drop stash@{0}  删除指定现场



git tag v1.0  打标签
git tag -a v0.1 -m "version 0.1 released" 3628164  对指定commitID的版本打标签，并附带说明
git show <tagname>可以看到说明文字
git tag -d v0.1  删除标签
git push origin <tagname>  推送标签到远程
git push origin --tags   推送所有标签
git tag -d v0.9  删除本地标签
git push origin :refs/tags/v0.9  删除远程标签




在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。



git config --global color.ui true  设置git命令行颜色